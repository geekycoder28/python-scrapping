// source: burstout/protos/main.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.burstout.AuthResult', null, global);
goog.exportSymbol('proto.burstout.BatchReq', null, global);
goog.exportSymbol('proto.burstout.Channel', null, global);
goog.exportSymbol('proto.burstout.Credentials', null, global);
goog.exportSymbol('proto.burstout.Cursor', null, global);
goog.exportSymbol('proto.burstout.Event', null, global);
goog.exportSymbol('proto.burstout.JWTToken', null, global);
goog.exportSymbol('proto.burstout.Message', null, global);
goog.exportSymbol('proto.burstout.MessageList', null, global);
goog.exportSymbol('proto.burstout.Organization', null, global);
goog.exportSymbol('proto.burstout.ScanResult', null, global);
goog.exportSymbol('proto.burstout.Source', null, global);
goog.exportSymbol('proto.burstout.Space', null, global);
goog.exportSymbol('proto.burstout.UUID', null, global);
goog.exportSymbol('proto.burstout.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.UUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.burstout.UUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.UUID.displayName = 'proto.burstout.UUID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.User.repeatedFields_, null);
};
goog.inherits(proto.burstout.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.User.displayName = 'proto.burstout.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Organization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.Organization.repeatedFields_, null);
};
goog.inherits(proto.burstout.Organization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Organization.displayName = 'proto.burstout.Organization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Credentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.burstout.Credentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Credentials.displayName = 'proto.burstout.Credentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.AuthResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.burstout.AuthResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.AuthResult.displayName = 'proto.burstout.AuthResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.JWTToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.burstout.JWTToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.JWTToken.displayName = 'proto.burstout.JWTToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.Channel.repeatedFields_, null);
};
goog.inherits(proto.burstout.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Channel.displayName = 'proto.burstout.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Space = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.Space.repeatedFields_, null);
};
goog.inherits(proto.burstout.Space, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Space.displayName = 'proto.burstout.Space';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.burstout.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Source.displayName = 'proto.burstout.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.burstout.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Message.displayName = 'proto.burstout.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Cursor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.Cursor.repeatedFields_, null);
};
goog.inherits(proto.burstout.Cursor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Cursor.displayName = 'proto.burstout.Cursor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.BatchReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.BatchReq.repeatedFields_, null);
};
goog.inherits(proto.burstout.BatchReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.BatchReq.displayName = 'proto.burstout.BatchReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.ScanResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.ScanResult.repeatedFields_, null);
};
goog.inherits(proto.burstout.ScanResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.ScanResult.displayName = 'proto.burstout.ScanResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.Event.repeatedFields_, null);
};
goog.inherits(proto.burstout.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.Event.displayName = 'proto.burstout.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.burstout.MessageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.burstout.MessageList.repeatedFields_, null);
};
goog.inherits(proto.burstout.MessageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.burstout.MessageList.displayName = 'proto.burstout.MessageList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.UUID.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.UUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.UUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.UUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.UUID}
 */
proto.burstout.UUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.UUID;
  return proto.burstout.UUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.UUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.UUID}
 */
proto.burstout.UUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.UUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.UUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.UUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.UUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.burstout.UUID.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.burstout.UUID.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.User.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.User.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f),
    creationDatetime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    creationTimestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    displayName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.burstout.UUID.toObject, includeInstance),
    organizationsList: jspb.Message.toObjectList(msg.getOrganizationsList(),
    proto.burstout.UUID.toObject, includeInstance),
    biography: jspb.Message.getFieldWithDefault(msg, 11, ""),
    space: (f = msg.getSpace()) && proto.burstout.UUID.toObject(includeInstance, f),
    homeRoom: (f = msg.getHomeRoom()) && proto.burstout.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.User}
 */
proto.burstout.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.User;
  return proto.burstout.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.User}
 */
proto.burstout.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationDatetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCreationTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 9:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    case 10:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addOrganizations(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiography(value);
      break;
    case 12:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setSpace(value);
      break;
    case 13:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setHomeRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCreationDatetime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreationTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getBiography();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSpace();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getHomeRoom();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.burstout.User.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setUserName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string phone_number = 2;
 * @return {string}
 */
proto.burstout.User.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setPhoneNumber = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.burstout.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UUID id = 4;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.User.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 4));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.User.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.User.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.User.prototype.hasId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string creation_datetime = 5;
 * @return {string}
 */
proto.burstout.User.prototype.getCreationDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setCreationDatetime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double creation_timestamp = 6;
 * @return {number}
 */
proto.burstout.User.prototype.getCreationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.burstout.User.prototype.setCreationTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string display_name = 7;
 * @return {string}
 */
proto.burstout.User.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string image_url = 8;
 * @return {string}
 */
proto.burstout.User.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setImageUrl = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated UUID connections = 9;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.User.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 9));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.User.prototype.setConnectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.User.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.User.prototype.clearConnectionsList = function() {
  this.setConnectionsList([]);
};


/**
 * repeated UUID organizations = 10;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.User.prototype.getOrganizationsList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 10));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.User.prototype.setOrganizationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.User.prototype.addOrganizations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.User.prototype.clearOrganizationsList = function() {
  this.setOrganizationsList([]);
};


/**
 * optional string biography = 11;
 * @return {string}
 */
proto.burstout.User.prototype.getBiography = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.burstout.User.prototype.setBiography = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional UUID space = 12;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.User.prototype.getSpace = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 12));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.User.prototype.setSpace = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.User.prototype.clearSpace = function() {
  this.setSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.User.prototype.hasSpace = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional UUID home_room = 13;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.User.prototype.getHomeRoom = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 13));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.User.prototype.setHomeRoom = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.User.prototype.clearHomeRoom = function() {
  this.setHomeRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.User.prototype.hasHomeRoom = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.Organization.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Organization.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Organization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Organization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Organization.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, ""),
    creationDatetime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    creationTimestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.burstout.UUID.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 11, ""),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    space: (f = msg.getSpace()) && proto.burstout.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Organization}
 */
proto.burstout.Organization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Organization;
  return proto.burstout.Organization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Organization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Organization}
 */
proto.burstout.Organization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationDatetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCreationTimestamp(value);
      break;
    case 10:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 13:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setSpace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Organization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Organization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Organization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Organization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreationDatetime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreationTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getSpace();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string entity_name = 1;
 * @return {string}
 */
proto.burstout.Organization.prototype.getEntityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setEntityName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string phone_number = 2;
 * @return {string}
 */
proto.burstout.Organization.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setPhoneNumber = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.burstout.Organization.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.burstout.Organization.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string creation_datetime = 5;
 * @return {string}
 */
proto.burstout.Organization.prototype.getCreationDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setCreationDatetime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double creation_timestamp = 6;
 * @return {number}
 */
proto.burstout.Organization.prototype.getCreationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.burstout.Organization.prototype.setCreationTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * repeated UUID members = 10;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.Organization.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 10));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.Organization.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.Organization.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.Organization.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional string description = 11;
 * @return {string}
 */
proto.burstout.Organization.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string image_url = 12;
 * @return {string}
 */
proto.burstout.Organization.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.burstout.Organization.prototype.setImageUrl = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional UUID space = 13;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Organization.prototype.getSpace = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 13));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Organization.prototype.setSpace = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Organization.prototype.clearSpace = function() {
  this.setSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Organization.prototype.hasSpace = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Credentials.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Credentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Credentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Credentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Credentials}
 */
proto.burstout.Credentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Credentials;
  return proto.burstout.Credentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Credentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Credentials}
 */
proto.burstout.Credentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Credentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Credentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Credentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Credentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.burstout.Credentials.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.burstout.Credentials.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.burstout.Credentials.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.burstout.Credentials.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.AuthResult.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.AuthResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.AuthResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.AuthResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.burstout.User.toObject(includeInstance, f),
    valid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.AuthResult}
 */
proto.burstout.AuthResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.AuthResult;
  return proto.burstout.AuthResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.AuthResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.AuthResult}
 */
proto.burstout.AuthResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.User;
      reader.readMessage(value,proto.burstout.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.AuthResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.AuthResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.AuthResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.AuthResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.User.serializeBinaryToWriter
    );
  }
  f = message.getValid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.burstout.User}
 */
proto.burstout.AuthResult.prototype.getUser = function() {
  return /** @type{?proto.burstout.User} */ (
    jspb.Message.getWrapperField(this, proto.burstout.User, 1));
};


/** @param {?proto.burstout.User|undefined} value */
proto.burstout.AuthResult.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.AuthResult.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.AuthResult.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool valid = 2;
 * @return {boolean}
 */
proto.burstout.AuthResult.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.burstout.AuthResult.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.JWTToken.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.JWTToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.JWTToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.JWTToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f),
    expiryTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    jwt: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.JWTToken}
 */
proto.burstout.JWTToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.JWTToken;
  return proto.burstout.JWTToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.JWTToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.JWTToken}
 */
proto.burstout.JWTToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiryTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.JWTToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.JWTToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.JWTToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.JWTToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getExpiryTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.JWTToken.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.JWTToken.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.JWTToken.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.JWTToken.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 expiry_time = 2;
 * @return {number}
 */
proto.burstout.JWTToken.prototype.getExpiryTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.burstout.JWTToken.prototype.setExpiryTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string jwt = 3;
 * @return {string}
 */
proto.burstout.JWTToken.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.burstout.JWTToken.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.Channel.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f),
    creationDatetime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    creationTimestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.burstout.UUID.toObject, includeInstance),
    previewId: (f = msg.getPreviewId()) && proto.burstout.UUID.toObject(includeInstance, f),
    spaceId: (f = msg.getSpaceId()) && proto.burstout.UUID.toObject(includeInstance, f),
    requestId: (f = msg.getRequestId()) && proto.burstout.UUID.toObject(includeInstance, f),
    messageCount: jspb.Message.getFieldWithDefault(msg, 9, 0),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Channel}
 */
proto.burstout.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Channel;
  return proto.burstout.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Channel}
 */
proto.burstout.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationDatetime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCreationTimestamp(value);
      break;
    case 4:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 5:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setPreviewId(value);
      break;
    case 7:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setSpaceId(value);
      break;
    case 8:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setRequestId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageCount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCreationDatetime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreationTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPreviewId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getSpaceId();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getRequestId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getMessageCount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Channel.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Channel.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Channel.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Channel.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string creation_datetime = 2;
 * @return {string}
 */
proto.burstout.Channel.prototype.getCreationDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.burstout.Channel.prototype.setCreationDatetime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double creation_timestamp = 3;
 * @return {number}
 */
proto.burstout.Channel.prototype.getCreationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.burstout.Channel.prototype.setCreationTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated UUID members = 4;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.Channel.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 4));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.Channel.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.Channel.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.Channel.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional UUID preview_id = 5;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Channel.prototype.getPreviewId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 5));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Channel.prototype.setPreviewId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Channel.prototype.clearPreviewId = function() {
  this.setPreviewId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Channel.prototype.hasPreviewId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UUID space_id = 7;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Channel.prototype.getSpaceId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 7));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Channel.prototype.setSpaceId = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Channel.prototype.clearSpaceId = function() {
  this.setSpaceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Channel.prototype.hasSpaceId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UUID request_id = 8;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Channel.prototype.getRequestId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 8));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Channel.prototype.setRequestId = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Channel.prototype.clearRequestId = function() {
  this.setRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Channel.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 message_count = 9;
 * @return {number}
 */
proto.burstout.Channel.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.burstout.Channel.prototype.setMessageCount = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string image_url = 10;
 * @return {string}
 */
proto.burstout.Channel.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.burstout.Channel.prototype.setImageUrl = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string channel_name = 11;
 * @return {string}
 */
proto.burstout.Channel.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.burstout.Channel.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.Space.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Space.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Space.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Space} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Space.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f),
    creationTimestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    spaceName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isDefault: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.burstout.UUID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Space}
 */
proto.burstout.Space.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Space;
  return proto.burstout.Space.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Space} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Space}
 */
proto.burstout.Space.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCreationTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpaceName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDefault(value);
      break;
    case 7:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Space.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Space.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Space} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Space.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCreationTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSpaceName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsDefault();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Space.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Space.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Space.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Space.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double creation_timestamp = 2;
 * @return {number}
 */
proto.burstout.Space.prototype.getCreationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.burstout.Space.prototype.setCreationTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string space_name = 3;
 * @return {string}
 */
proto.burstout.Space.prototype.getSpaceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.burstout.Space.prototype.setSpaceName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string display_name = 4;
 * @return {string}
 */
proto.burstout.Space.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.burstout.Space.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_default = 6;
 * @return {boolean}
 */
proto.burstout.Space.prototype.getIsDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.burstout.Space.prototype.setIsDefault = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated UUID channels = 7;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.Space.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 7));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.Space.prototype.setChannelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.Space.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.Space.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Source}
 */
proto.burstout.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Source;
  return proto.burstout.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Source}
 */
proto.burstout.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Source.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Source.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Source.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Source.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f),
    sourceId: (f = msg.getSourceId()) && proto.burstout.UUID.toObject(includeInstance, f),
    channelId: (f = msg.getChannelId()) && proto.burstout.UUID.toObject(includeInstance, f),
    body: jspb.Message.getFieldWithDefault(msg, 4, ""),
    creationDatetime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    creationTimestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    requestId: (f = msg.getRequestId()) && proto.burstout.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Message}
 */
proto.burstout.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Message;
  return proto.burstout.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Message}
 */
proto.burstout.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setSourceId(value);
      break;
    case 3:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setChannelId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationDatetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCreationTimestamp(value);
      break;
    case 8:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getSourceId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getChannelId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreationDatetime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreationTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRequestId();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Message.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Message.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Message.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Message.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID source_id = 2;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Message.prototype.getSourceId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 2));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Message.prototype.setSourceId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Message.prototype.clearSourceId = function() {
  this.setSourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Message.prototype.hasSourceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UUID channel_id = 3;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Message.prototype.getChannelId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 3));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Message.prototype.setChannelId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Message.prototype.clearChannelId = function() {
  this.setChannelId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Message.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string body = 4;
 * @return {string}
 */
proto.burstout.Message.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.burstout.Message.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string creation_datetime = 5;
 * @return {string}
 */
proto.burstout.Message.prototype.getCreationDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.burstout.Message.prototype.setCreationDatetime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double creation_timestamp = 6;
 * @return {number}
 */
proto.burstout.Message.prototype.getCreationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.burstout.Message.prototype.setCreationTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional UUID request_id = 8;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Message.prototype.getRequestId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 8));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Message.prototype.setRequestId = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Message.prototype.clearRequestId = function() {
  this.setRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Message.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.Cursor.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Cursor.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Cursor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Cursor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Cursor.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: (f = msg.getEntityId()) && proto.burstout.UUID.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    length: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    idListList: jspb.Message.toObjectList(msg.getIdListList(),
    proto.burstout.UUID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Cursor}
 */
proto.burstout.Cursor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Cursor;
  return proto.burstout.Cursor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Cursor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Cursor}
 */
proto.burstout.Cursor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 5:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Cursor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Cursor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Cursor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Cursor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIdListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID entity_id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Cursor.prototype.getEntityId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Cursor.prototype.setEntityId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Cursor.prototype.clearEntityId = function() {
  this.setEntityId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Cursor.prototype.hasEntityId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.burstout.Cursor.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.burstout.Cursor.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 length = 3;
 * @return {number}
 */
proto.burstout.Cursor.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.burstout.Cursor.prototype.setLength = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 limit = 4;
 * @return {number}
 */
proto.burstout.Cursor.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.burstout.Cursor.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated UUID id_list = 5;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.Cursor.prototype.getIdListList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 5));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.Cursor.prototype.setIdListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.Cursor.prototype.addIdList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.Cursor.prototype.clearIdListList = function() {
  this.setIdListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.BatchReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.BatchReq.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.BatchReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.BatchReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.BatchReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idListList: jspb.Message.toObjectList(msg.getIdListList(),
    proto.burstout.UUID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.BatchReq}
 */
proto.burstout.BatchReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.BatchReq;
  return proto.burstout.BatchReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.BatchReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.BatchReq}
 */
proto.burstout.BatchReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.BatchReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.BatchReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.BatchReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.BatchReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UUID id_list = 1;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.BatchReq.prototype.getIdListList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.BatchReq.prototype.setIdListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.BatchReq.prototype.addIdList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.BatchReq.prototype.clearIdListList = function() {
  this.setIdListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.ScanResult.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.ScanResult.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.ScanResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.ScanResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.ScanResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    startIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.burstout.Message.toObject, includeInstance),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.burstout.Channel.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.burstout.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.ScanResult}
 */
proto.burstout.ScanResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.ScanResult;
  return proto.burstout.ScanResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.ScanResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.ScanResult}
 */
proto.burstout.ScanResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndIndex(value);
      break;
    case 3:
      var value = new proto.burstout.Message;
      reader.readMessage(value,proto.burstout.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 4:
      var value = new proto.burstout.Channel;
      reader.readMessage(value,proto.burstout.Channel.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 5:
      var value = new proto.burstout.User;
      reader.readMessage(value,proto.burstout.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.ScanResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.ScanResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.ScanResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.ScanResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.burstout.Message.serializeBinaryToWriter
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.burstout.Channel.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.burstout.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 start_index = 1;
 * @return {number}
 */
proto.burstout.ScanResult.prototype.getStartIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.burstout.ScanResult.prototype.setStartIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end_index = 2;
 * @return {number}
 */
proto.burstout.ScanResult.prototype.getEndIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.burstout.ScanResult.prototype.setEndIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Message messages = 3;
 * @return {!Array<!proto.burstout.Message>}
 */
proto.burstout.ScanResult.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.burstout.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.Message, 3));
};


/** @param {!Array<!proto.burstout.Message>} value */
proto.burstout.ScanResult.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.burstout.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.Message}
 */
proto.burstout.ScanResult.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.burstout.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.ScanResult.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * repeated Channel channels = 4;
 * @return {!Array<!proto.burstout.Channel>}
 */
proto.burstout.ScanResult.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.burstout.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.Channel, 4));
};


/** @param {!Array<!proto.burstout.Channel>} value */
proto.burstout.ScanResult.prototype.setChannelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.burstout.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.Channel}
 */
proto.burstout.ScanResult.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.burstout.Channel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.ScanResult.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};


/**
 * repeated User users = 5;
 * @return {!Array<!proto.burstout.User>}
 */
proto.burstout.ScanResult.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.burstout.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.User, 5));
};


/** @param {!Array<!proto.burstout.User>} value */
proto.burstout.ScanResult.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.burstout.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.User}
 */
proto.burstout.ScanResult.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.burstout.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.ScanResult.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.Event.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.burstout.UUID.toObject(includeInstance, f),
    requestId: (f = msg.getRequestId()) && proto.burstout.UUID.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    roomId: (f = msg.getRoomId()) && proto.burstout.UUID.toObject(includeInstance, f),
    userId: (f = msg.getUserId()) && proto.burstout.UUID.toObject(includeInstance, f),
    sourceId: (f = msg.getSourceId()) && proto.burstout.UUID.toObject(includeInstance, f),
    body: jspb.Message.getFieldWithDefault(msg, 7, ""),
    message: (f = msg.getMessage()) && proto.burstout.Message.toObject(includeInstance, f),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.burstout.UUID.toObject, includeInstance),
    spaceId: (f = msg.getSpaceId()) && proto.burstout.UUID.toObject(includeInstance, f),
    channelName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    channel: (f = msg.getChannel()) && proto.burstout.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.Event}
 */
proto.burstout.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.Event;
  return proto.burstout.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.Event}
 */
proto.burstout.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setRoomId(value);
      break;
    case 5:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setUserId(value);
      break;
    case 6:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setSourceId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 8:
      var value = new proto.burstout.Message;
      reader.readMessage(value,proto.burstout.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 9:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 10:
      var value = new proto.burstout.UUID;
      reader.readMessage(value,proto.burstout.UUID.deserializeBinaryFromReader);
      msg.setSpaceId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 12:
      var value = new proto.burstout.Channel;
      reader.readMessage(value,proto.burstout.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getRequestId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRoomId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getSourceId();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.burstout.Message.serializeBinaryToWriter
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getSpaceId();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.burstout.UUID.serializeBinaryToWriter
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.burstout.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Event.prototype.getId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 1));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Event.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID request_id = 2;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Event.prototype.getRequestId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 2));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Event.prototype.setRequestId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearRequestId = function() {
  this.setRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.burstout.Event.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.burstout.Event.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UUID room_id = 4;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Event.prototype.getRoomId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 4));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Event.prototype.setRoomId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearRoomId = function() {
  this.setRoomId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UUID user_id = 5;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Event.prototype.getUserId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 5));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Event.prototype.setUserId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearUserId = function() {
  this.setUserId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UUID source_id = 6;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Event.prototype.getSourceId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 6));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Event.prototype.setSourceId = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearSourceId = function() {
  this.setSourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasSourceId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string body = 7;
 * @return {string}
 */
proto.burstout.Event.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.burstout.Event.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Message message = 8;
 * @return {?proto.burstout.Message}
 */
proto.burstout.Event.prototype.getMessage = function() {
  return /** @type{?proto.burstout.Message} */ (
    jspb.Message.getWrapperField(this, proto.burstout.Message, 8));
};


/** @param {?proto.burstout.Message|undefined} value */
proto.burstout.Event.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated UUID members = 9;
 * @return {!Array<!proto.burstout.UUID>}
 */
proto.burstout.Event.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.burstout.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.UUID, 9));
};


/** @param {!Array<!proto.burstout.UUID>} value */
proto.burstout.Event.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.burstout.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.UUID}
 */
proto.burstout.Event.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.burstout.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.Event.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional UUID space_id = 10;
 * @return {?proto.burstout.UUID}
 */
proto.burstout.Event.prototype.getSpaceId = function() {
  return /** @type{?proto.burstout.UUID} */ (
    jspb.Message.getWrapperField(this, proto.burstout.UUID, 10));
};


/** @param {?proto.burstout.UUID|undefined} value */
proto.burstout.Event.prototype.setSpaceId = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearSpaceId = function() {
  this.setSpaceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasSpaceId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string channel_name = 11;
 * @return {string}
 */
proto.burstout.Event.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.burstout.Event.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional Channel channel = 12;
 * @return {?proto.burstout.Channel}
 */
proto.burstout.Event.prototype.getChannel = function() {
  return /** @type{?proto.burstout.Channel} */ (
    jspb.Message.getWrapperField(this, proto.burstout.Channel, 12));
};


/** @param {?proto.burstout.Channel|undefined} value */
proto.burstout.Event.prototype.setChannel = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.burstout.Event.prototype.clearChannel = function() {
  this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.burstout.Event.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.burstout.MessageList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.burstout.MessageList.prototype.toObject = function(opt_includeInstance) {
  return proto.burstout.MessageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.burstout.MessageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.MessageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.burstout.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.burstout.MessageList}
 */
proto.burstout.MessageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.burstout.MessageList;
  return proto.burstout.MessageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.burstout.MessageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.burstout.MessageList}
 */
proto.burstout.MessageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.burstout.Message;
      reader.readMessage(value,proto.burstout.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.burstout.MessageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.burstout.MessageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.burstout.MessageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.burstout.MessageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.burstout.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.burstout.Message>}
 */
proto.burstout.MessageList.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.burstout.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.burstout.Message, 1));
};


/** @param {!Array<!proto.burstout.Message>} value */
proto.burstout.MessageList.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.burstout.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.burstout.Message}
 */
proto.burstout.MessageList.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.burstout.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.burstout.MessageList.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


goog.object.extend(exports, proto.burstout);
